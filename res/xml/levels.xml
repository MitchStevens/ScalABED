<?xml version="1.0" encoding="UTF-8"?>
<root>
    <level_set name="Tutorial">
        <level name="Introduction to BabyTown" min_size="3" >
            <io>
                <input>Left 1</input>
                <output>Right 1</output>
            </io>
            <instruction_text>
                Place an input on the left and an output on the right. Then connect them by using bus pieces.
            </instruction_text>
            <tests>
                <test>0->0</test>
                <test>1->1</test>
            </tests>
            <completion_text>
                You did it! The easiest level in the game! Hopefully the game gets harder than this (Right?). Those pieces we were playing with a moment ago are called ‘Gates’, because they stop or allow the flow of a signal. This signal is represented by an electric blue current in ABED.
            </completion_text>
            <upon_completion>
                <circuit_reward>NOT</circuit_reward>
                <level_reward>0.1</level_reward>
            </upon_completion>
        </level>
        <level name="Is Nice?" min_size="3">
            <io>
                <input>Left 1</input>
                <output>Right 1</output>
            </io>
            <instruction_text>
                We are going to test out our new ‘Not’ gate. Place the input on side 3 and the output on side 1 as before, but this time create a Not gate in the center instead of a Bus.
            </instruction_text>
            <tests>
                <test>0->1</test>
                <test>1->0</test>
            </tests>
            <completion_text>
                Another success! A Not gate negates the signal coming from the input. So if the input of a Not gate is off, it will output on, and vice versa. In general, the input of a gate is on the left and the output is on the right. But as we will see, we are by no means restricted to one input/output.
            </completion_text>
            <upon_completion>
                <circuit_reward>OR</circuit_reward>
                <level_reward></level_reward>
            </upon_completion>
        </level>
        <level name="My First Three-way!" min_size="3">
            <io>
                <input>Left 1</input>
                <input>Up 1</input>
            </io>
            <output>Right 1</output>
            <instruction_text>
                Oh boy, two inputs? Create an Or gate and place inputs at 3, 0 and an output at 1. Remember to rotate the input so the signal is facing the Or gate.
            </instruction_text>
            <tests>
                <test>00->0</test>
                <test>01->1</test>
                <test>10->1</test>
                <test>11->1</test>
            </tests>
            <completion_text>
                Now we’re getting somewhere! An Or gate will output a signal if one or more of its inputs is turned on, otherwise it outputs nothing. Imagine of a waiter asking “Would you like milk OR sugar in your coffee?” Gates can have as many inputs/outputs as they damn well please, with one condition: there must at least one. Obviously.
            </completion_text>
            <upon_completion>
                <circuit_reward></circuit_reward>
                <level_reward>Circuits on Circuits?</level_reward>
            </upon_completion>
        </level>
        <level name="Circuits on Circuits?" min_size="4">
            <io>
                <input>Left 1</input>
                <input>Up 1</input>
                <output>Right 1</output>
            </io>
            <instruction_text>
                As it turns out, we can also create completely original circuits from those we already have. Create another Or, but this time use a not gate to negate the output. You may need to change the size of the circuit board.
            </instruction_text>
            <tests>
                <test>00->1</test>
                <test>01->0</test>
                <test>10->0</test>
                <test>11->1</test>
            </tests>
            <completion_text>
                And there you go, a whole new gate. Once you complete a level, the game is turned into a circuit for you to use on any game you please. You can even create circuits without completing a level on sandbox mode.
            </completion_text>
            <upon_completion>
                <circuit_reward>NOR</circuit_reward>
                <level_reward>Andromeda (It’s a galaxy out there!)</level_reward>
            </upon_completion>
        </level>
        <level name="Andromeda (It’s a galaxy out there!)" min_size="5">
            <io>
                <input>Left 1</input>
                <input>Up 1</input>
                <output>Right 1</output>
            </io>
            <instruction_text>
                Create an And gate. This gate takes two inputs at 3, 0 and outputs a signal if both of the inputs are on. If one or more of the outputs are off, the output should also be off.
            </instruction_text>
            <tests>
                <test>00->0</test>
                <test>01->0</test>
                <test>10->0</test>
                <test>11->1</test>
            </tests>
            <completion_text>
                Hey you did it! I was worried I’d lose you there for a second. And, Not and Or are the fundamental operations of Boolean algebra, every electronic circuit in your computer is made exclusively of these gates. Now you’ve created these three, we can begin to really make things!
            </completion_text>
            <upon_completion>
                <circuit_reward>AND</circuit_reward>
                <level_reward>Mr. NAND-Man</level_reward>
            </upon_completion>
        </level>
        <level name="Mr. NAND-Man" min_size="4">
            <io>
                <input>Left 1</input>
                <input>Up 1</input>
                <output>Right 1</output>
            </io>
            <objective>NAND</objective>
            <instruction_text>
                Negate an And gate.
            </instruction_text>
            <tests>
                <test>00->1</test>
                <test>01->1</test>
                <test>10->1</test>
                <test>11->1</test>
            </tests>
            <completion_text>
                Yeah it was pretty easy, but you got a new circuit out of it. And you gotta collect ‘em all! You feel like Ash Ketchum yet, you piece of millennial trash?
            </completion_text>
            <upon_completion>
                <circuit_reward>NAND</circuit_reward>
                <level_reward>Make a Left</level_reward>
            </upon_completion>
        </level>
    </level_set>
    <level_set name="Basic">
        <level name="Make a Left" min_size="3">
            <io>
                <input>Left 1</input>
                <output>Up 1</output>
            </io>
            <instruction_text>
                Create a circuit that takes and input on 3 and outputs the signal to an output on side 0.
            </instruction_text>
            <tests>
                <test>0->0</test>
                <test>1->1</test>
            </tests>
            <completion_text>
                Wow, writing these is really tiresome. These gates should give you more freedom in choosing where to place tiles.
            </completion_text>
            <upon_completion>
                <circuit_reward>LEFT</circuit_reward>
                <circuit_reward>RIGHT</circuit_reward>
                <circuit_reward>SUPER</circuit_reward>
                <level_reward>Some XOR problems</level_reward>
            </upon_completion>
        </level>
        <level name="XOR problems" min_size="7">
            <io>
                <input>Left 1</input>
                <input>Up 1</input>
                <output>Right 1</output>
            </io>
            <instruction_text>
                This one’s tricky. Create a gate that outputs a signal if exactly one input is on. If both inputs are on or both inputs are off, then output off. Hint: The easiest way to do this is to use 4 NAND gates.
            </instruction_text>
            <tests>
                <test>00->0</test>
                <test>01->1</test>
                <test>10->1</test>
                <test>11->1</test>
            </tests>
            <completion_text>
                Oh boy, this one was a good one. Did you have to use google? No shame if you did.
            </completion_text>
            <upon_completion>
                <circuit_reward>XOR</circuit_reward>
                <level_reward>A Crossover Episode</level_reward>
            </upon_completion>
        </level>
        <level name="What is this, a crossover episode!" min_size="6">
            <io>
                <input>Left 1</input>
                <input>Up 1</input>
                <output>Right 1</output>
                <output>Down 1</output>
            </io>
            <instruction_text>
                Using the new XOR gate, create a circuit the routes the signal at the top to the bottom, and the signal on the left to the right. In other words, create two buses that cross over each other.
            </instruction_text>
            <tests>
                <test>00->00</test>
                <test>01->10</test>
                <test>10->01</test>
                <test>11->11</test>
            </tests>
            <completion_text>
                In computer science, this operation is called an XOR swap, and was used when memory was very expensive. Now days, memory is pretty cheap and we don’t worry so much.
            </completion_text>
            <upon_completion>
                <circuit_reward>CROSS OVER</circuit_reward>
                <level_reward>Scrublords Delight</level_reward>
            </upon_completion>
        </level>
        <level name="Scrublords Delight" min_size="4">
            <io>
                <input>Left 1</input>
                <input>Up 1</input>
                <output>Right 1</output>
                <output>Down 1</output>
            </io>
            <instruction_text>
                Connect side 3 to side 2 and side 0 to side 1.
            </instruction_text>
            <tests>
                <test>00->00</test>
                <test>01->01</test>
                <test>10->10</test>
                <test>11->11</test>
            </tests>
            <completion_text>
                You’ll thank me later when you’re trying to save space. This piece is a lifesaver!
            </completion_text>
            <upon_completion>
                <circuit_reward>CORNER CUT</circuit_reward>
            </upon_completion>
        </level>
    </level_set>
    <level_set name="Advanced Gates">
        <level name="A Two Parter">
            <io>
                <input>Left 2</input>
                <output>Right 2</output>
            </io>
            <instruction_text>

            </instruction_text>
            <tests>
                <test>00->00</test>
                <test>01->01</test>
                <test>10->10</test>
                <test>11->11</test>
            </tests>
            <completion_text>
                A two parter completion text
            </completion_text>
            <upon_completion>
                <circuit_reward>CORNER CUT</circuit_reward>
            </upon_completion>
        </level>
        <level name="It's French for Ship">

        </level>
        <level name="The Opposite of Merge!">

        </level>
        <level name="The ol' Digital Sage Switcharoo">

        </level>
        <level name="Double Negative">

        </level>
        <level name="Double And">

        </level>
        <level name="4 part bus">

        </level>
    </level_set>
    <level_set name="Mux and Demux">
        <level name="Multiplexer">

        </level>
        <level name="Demultiplexer">

        </level>
        <level name="Advanced BabyTown">

        </level>
    </level_set>
    <level_set name="Binary">
        <level name="Neo is One Backwards!" min_size="4">
            <io>
                <output>Right 4</output>
            </io>
            <instruction_text>
                Now that you have a Display, we can start to learn about binary!
            </instruction_text>
            <tests>
                <test> ->0001</test>
            </tests>
        </level>
        <level name="Number Fun">

        </level>
    </level_set>
    <level_set name="Bitwise Operations">
        <level name="Right Shift">

        </level>
        <level name="Left Shift">

        </level>
        <level name="Bitwise Not">

        </level>
        <level name="Bitwise OR">

        </level>
        <level name="Bitwise AND">

        </level>
        <level name="Bitwise XOR">

        </level>
    </level_set>
    <level_set name="Arithmetic Operation">
        <level name="Half Adder">

        </level>
        <level name="Full Adder">

        </level>
        <level name="2 bit adder">

        </level>
        <level name="Adder">

        </level>
        <level name="Subtract">

        </level>
        <level name="Multiplication">

        </level>
        <level name="Divide">

        </level>
        <level name="Modulus">

        </level>
    </level_set>
    <level_set name="Memory">
        <level name="RS Latch">

        </level>
        <level name="1 Bit of Memory">

        </level>
        <level name="2 Bits!">

        </level>
        <level name="A byte of memory">

        </level>
    </level_set>
    <level_set name="RAM">

    </level_set>
    <level_set name="CPU">

    </level_set>
</root>
























